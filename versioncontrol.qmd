# 9. Version Control {.unnumbered}

Version control of files is the practice of tracking changes made to a file over time, creating a history of revisions that can be reviewed, reverted, or compared. It involves using specialized software tools that allow users to manage and store different versions of a file, along with associated metadata such as timestamps, authorship, and comments.

Version control is commonly used in software development to manage the source code of a project, but it can also be applied to any type of file, including text documents, spreadsheets, graphics, and multimedia files. By keeping different versions of a file separated and organized, version control helps to avoid data loss, reduce errors, and enable collaboration among multiple users working on the same file.

It is highly recommended to make a habit out of at least one, but preferably more of the following practices if you do not (want to) use a formal version control system:

-   Keep raw data separately from any processed data and document which steps have been taken to go from the former to the latter

-   Rename a file every time you make a sizable change

-   Use dates in the filename in the format YYYYMMDD

-   Append the filename with a version number, e.g., document_v1.0, document_v1.2, etc.

-   See [this link](https://authors.library.caltech.edu/103626/) for a helper document for coming up with a good file naming convention

-   Include a versioning history within the document, e.g., on the first page, explaining what changed in which version

-   Use services like Google drive and Dropbox, which allow collaborative editing but also reverting to previous versions

### **Formal Version Control Systems**

Formal version control systems are software tools that are designed to help manage changes to files, particularly source code files in software development projects. They enable users to track modifications made to a file over time, store different versions of the file, and collaborate with other users. Formal version control systems typically provide features such as:

-   Check-in and check-out of files

-   Version history tracking

-   Branching and merging of files

-   Access control and permission management

-   Annotation and commenting on changes

-   Diff and merge tools for comparing versions

-   Integration with other development tools and platforms

Examples of formal version control systems include Git, Subversion (SVN), Mercurial, and Perforce. These systems are widely used in software development teams and other collaborative projects where file versioning, change tracking, and collaboration are critical.
